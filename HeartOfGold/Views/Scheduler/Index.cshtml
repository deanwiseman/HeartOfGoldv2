@{
    ViewBag.Title = "Scheduler";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h3 class="center">Collection Events</h3>
<hr />

@* http://www.dotnetawesome.com/2017/06/event-calendar-in-aspnet-mvc.html
  The above article/tutorial was followed to implement the scheduler  
*@

<div id="scheduler"></div>

<div id="Modal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title"><span id="eventTitle"></span></h4>
                <hr style="margin:5px;"/>
            </div>
            <div class="modal-body">               
                    <p id="eventDetails"></p>
           </div>
            <div class="modal-footer">
                <hr style="margin:10px;" />
                <button id="btnDeleteEvent" class="btn btn-default">
                    <span class="glyphicon glyphicon-remove"></span>
                    Remove
                </button>
                <button id="btnEditEvent" class="btn btn-primary register-button">
                    <i class="far fa-edit"></i>
                    Edit
                </button>
            </div>
        </div>
    </div>
</div>

<div id="ModalSaveEvent" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                @*<h4 class="modal-title"><span id="eventTitle"></span></h4>*@
                <div class="center">
                    <h3>Event</h3>
                </div>
                <hr style="margin:5px;" />
            </div>
            <div class="modal-body">
                <form class="form-horizontal">
                    <input type="hidden" id="EventID" />
                    <input type="hidden" id="RequestKey"/>
                    <div class="form-group">
                        <label>Student Number:</label>
                        <input type="text" id="Subject" class="form-control"/>
                    </div>
                    <div class="form-group">
                        <label>Description:</label>
                        <input type="text" id="Description" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label class="control-label">Start Date:</label>
                        <div class="input-group date" id="DatePicker">
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                            <input type="text" id="StartDate" class="form-control" />

                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label">End Date:</label>
                        <div class="input-group date" id="DatePicker2">
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                            <input type="text" id="EndDate" class="form-control" />
                        </div>
                    </div>

                    <div class="form-group">
                        <label>Event Display Colour: </label>
                        <select id="Colour" style="width:120px">
                            <option value="#00B233" class="form-control">Green (Open)</option>
                            <option value="#B80000" class="form-control">Red (Closed)</option>
                        </select>
                    </div>
                    <div class="modal-footer center">
                        <input id="emailCheck"type="checkbox" name="SendEmail" value="true"/>
                        <button type="button" id="SaveEvent" class="btn btn-default register-button">Save Event</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    @Scripts.Render("~/bundles/jqueryui");
    @Scripts.Render("~/bundles/fullcalendar");

    <script>
        $(document).ready(function () {
            var events = [];
            var selectedEvent = null;

            $('#Colour').val("#00B233");

            toastr.options = {
                "closeButton": true,
                "preventDuplicates": true
            };

            RenderScheduler();

            function RenderScheduler() {
                events = [];
                $.ajax({
                    type: 'GET',
                    url: '/scheduler/GetEvents',
                    success: function (data) {
                        $.each(data, function (i, v) {
                            events.push({
                                eventID: v.EventID,
                                title: v.Subject,
                                description: v.Description,
                                start: moment(v.Start),
                                end: v.End != null ? moment(v.End) : moment(v.Start).add(15, 'minutes'),
                                color: v.ThemeColour,
                                requestkey: v.RequestKey
                            });
                        })

                        GenerateEvents(events);
                    },
                    error: function () {
                        toastr.error('Failed to fetch event data and render the scheduler.');
                    }
                })
            }

            function GenerateEvents(events) {
                $('#scheduler').fullCalendar('destroy');
                $('#scheduler').fullCalendar({
                    header: {
                        left: 'prev,next today',
                        center: 'title',
                        right: 'month,agendaWeek,agendaDay'
                    },
                    defaultView: 'month',
                    defaultDate: new Date(),
                    contentHeight: 500,
                    allDaySlot: false,
                    selectable: true,
                    slotMinutes: 15,
                    minTime: '8:00',
                    maxTime: '17:00',
                    eventLimit: true,
                    weekends: false,
                    events: events,
                    eventClick: function (calEvent, jsEvent, view) {
                        selectedEvent = calEvent;
                        $('#Modal #eventTitle').text(calEvent.title);
                        var $description = $('<div/>');
                        $description.append($('<p/>').html('<b>Start: </b>' + calEvent.start.format('DD-MMM-YYYY HH:mm a')));
                        if (calEvent.end != null) {
                            $description.append($('<p/>').html('<b>End: </b>' + calEvent.end.format('DD-MMM-YYYY HH:mm a')));
                        }
                        $description.append($('<p/>').html('<b>Description: </b>' + calEvent.description));
                        $('#Modal #eventDetails').empty().html($description);

                        $('#Modal').modal();
                    },
                    selectable: true,
                    select: function (start, end) {
                        selectedEvent = {
                            eventID: 0,
                            requestkey: 0,
                            title: '',
                            description: '',
                            start: start,
                            end: end,
                            color: ''                   
                        };
                        openEditModal();
                        $('#scheduler').fullCalendar('unselect');
                    },
                    editable: true,
                    eventDrop: function (data) {
                        var updatedData = {
                            EventID: data.eventID,
                            Subject: data.title,
                            Start: data.start.format('DD/MM/YYYY HH:mm A'),
                            End: data.end != null ? data.end.format('DD/MM/YYYY HH:mm A') : null,
                            Description: data.description,
                            ThemeColour: data.color,
                            RequestKey: data.requestkey
                        };

                        var startDate = moment(updatedData.Start, "DD/MM/YYYY HH:mm A").toDate();
                        var endDate = moment(updatedData.End, "DD/MM/YYYY HH:mm A").toDate();

                        if (startDate < moment()) {
                            toastr.error('Cannot create an event in the past.');
                            return;
                        } else {
                            SaveEvent(updatedData);
                        }
                        
                    }
                })
            }

            // Click event for editing an event
            $('#btnEditEvent').click(function () {
                openEditModal();
            })

            // Click event for saving event
            $('#SaveEvent').click(function () {
                var data = null;
                var emailCheck = false;
                if ($('#Subject').val().trim() == "") {
                    toastr.info('The event subject is required.');
                    return;
                }
                if ($('#Description').val().trim() == "") {
                    toastr.info("Please enter a description for this event.");
                    return;
                }
                if ($('#StartDate').val().trim() == "") {
                    toastr.info('Please enter a starting date.');
                    return;
                }
                else {
                    var startDate = moment($('#StartDate').val(), "DD/MM/YYYY HH:mm A").toDate();
                    var endDate = moment($('#EndDate').val(), "DD/MM/YYYY HH:mm A").toDate();
                    if (startDate > endDate) {
                        toastr.warning('End date cannot be before the starting date.');
                        return;
                    }
                    @* 
                        moment() gets the current date. Check if we're not trying to create an event in the past...   
                    *@
                    if (startDate < moment()) {
                        toastr.warning('Cannot create an event in the past.');
                        return;
                    }

                    if ($('#emailCheck').is(':checked')) {
                        emailCheck = true;
                    }
                }
                data = {
                    EventID: $('#EventID').val(),
                    RequestKey: $('#RequestKey').val(),
                    Subject: $('#Subject').val().trim(),
                    Start: $('#StartDate').val().trim(),
                    End: $('#EndDate').val(),
                    Description: $('#Description').val(),
                    ThemeColour: $('#Colour').val()
                }

                if (confirm('This will send an email to notify the student. Are you sure?')) {
                    SaveEvent(data);
                    toastr.success('Event created and student notified!');
                }
                
            });

            function SaveEvent(data) {
                $.ajax({
                    type: 'POST',
                    url: 'Scheduler/SaveEvent',
                    data: data,
                    success: function (data) {
                        if (data.status) {
                             RenderScheduler();
                             $('#ModalSaveEvent').modal('hide');                            
                        }
                    },
                    error: function () {
                        toastr.error('Failed to create event.');
                    }

                })
            }


            // Click event for deleting an event
            $('#btnDeleteEvent').click(function () {
                if (selectedEvent !== null && confirm('Are you sure you want to remove this event?')) {
                    $.ajax({
                        type: 'POST',
                        url: 'Scheduler/DeleteEvent',
                        data: {
                            'eventID': selectedEvent.eventID,
                            'RequestKey': selectedEvent.requestkey },
                        success: function (data) {
                            if (data.status) {
                                toastr.info("This event has been deleted.");
                                RenderScheduler();
                                $('#Modal').modal('hide');
                            }
                        },
                        error: function () {
                            toastr.error('Failed to delete event.');
                        }
                    })
                }
            });

            

            $('#DatePicker,#DatePicker2').datetimepicker({
                format: 'DD/MM/YYYY HH:mm A'
            })

            function openEditModal() {
                if (selectedEvent != null) {
                    $('#EventID').val(selectedEvent.eventID);
                    $('#Subject').val(selectedEvent.title);
                    $('#StartDate').val(selectedEvent.start.format('DD/MM/YYYY HH:mm A'));
                    $('#EndDate').val(selectedEvent.end != null ? selectedEvent.end.format('DD/MM/YYYY HH:mm A') : '');
                    $('#Description').val(selectedEvent.description);
                    $('#Colour').val(selectedEvent.color);
                }

                $('#Modal').modal('hide');
                $('#ModalSaveEvent').modal();
            }
        })
    </script>
}
